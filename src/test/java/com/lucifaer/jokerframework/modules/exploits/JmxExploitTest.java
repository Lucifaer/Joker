package com.lucifaer.jokerframework.modules.exploits;

import com.lucifaer.jokerframework.core.config.ExploitConfiguration;
import com.lucifaer.jokerframework.core.config.ShellConfiguration;
import com.lucifaer.jokerframework.core.factory.ExploitFactory;
import com.lucifaer.jokerframework.core.factory.PayloadFactory;
import com.lucifaer.jokerframework.data.ShellTestData;
import com.lucifaer.jokerframework.data.core.ShellDataModel;
import com.lucifaer.jokerframework.modules.Exploit;
import com.lucifaer.jokerframework.modules.Payload;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.SystemOutRule;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Map;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {ShellConfiguration.class, ExploitConfiguration.class})
public class JmxExploitTest {
    @Rule
    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();

    @Autowired
    private ShellDataModel shellContext;

    @Autowired
    private ExploitFactory exploitFactory;

    @Autowired
    private PayloadFactory payloadFactory;

    @Test
//  FIXME: 使用systemOutRule获取System.out.println时会额外获取spring调试信息，导致结果中存在输出字符，但是测试不通过的问题
    public void exploit() throws Exception {
        Map<String, String> testParams = ShellTestData.params;
        testParams.put("exploitName", "jmx");
        testParams.put("payloadName", "command");
        shellContext.setParams(testParams);
        Exploit exploit = (Exploit) exploitFactory.getObject();
        Payload payload = (Payload) payloadFactory.getObject();
        exploit.setPayload(payload);
        exploit.exploit();
        assertEquals("server\r", systemOutRule.getLogWithNormalizedLineSeparator());
    }
}