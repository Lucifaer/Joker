package com.lucifaer.jokerframework.core.factory;

import com.lucifaer.jokerframework.data.JokerContext;
import com.lucifaer.jokerframework.data.ShellContext;
import com.lucifaer.jokerframework.modules.Exploit;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.util.StringUtils;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class ExploitFactory implements FactoryBean, ApplicationContextAware {
    @Autowired
    JokerContext jokerContext;

    @Autowired
    ApplicationContext applicationContext;

    public Map<String, Exploit> exploitMap = new HashMap<>();

    @Override
    public Object getObject() throws Exception {
        ShellContext shellContext = jokerContext.getCurrentShellContext();
        String paramsExploitName = shellContext.getParams().get("exploitName");
        for (Object exploitName : exploitMap.keySet()) {
            if (paramsExploitName.equals(exploitName)) {
                return exploitMap.get(exploitName);
            }
        }
        throw new Exception("No exploit named " + paramsExploitName);
    }

    @Override
    public Class<?> getObjectType() {
        return Exploit.class;
    }

    @Override
    public boolean isSingleton() {
        return false;
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        Map<String, Exploit> map = applicationContext.getBeansOfType(Exploit.class);
        for (Map.Entry<String, Exploit> entry : map.entrySet()) {
            if (StringUtils.isEmpty(entry.getValue().getExploitName())) {
                throw new RuntimeException("exploit name is empty: " + entry.getValue());
            }
            if (exploitMap.get(entry.getValue().getExploitName()) != null) {
                throw new RuntimeException("exploit " + entry.getValue().getExploitName() + " already used by " + exploitMap.get(entry.getValue().getExploitName()));
            }
            exploitMap.put(entry.getValue().getExploitName(), entry.getValue());
        }
    }
}
