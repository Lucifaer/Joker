package com.lucifaer.jokerframework.core.config;

import com.lucifaer.jokerframework.data.core.ShellDataModel;
import com.lucifaer.jokerframework.modules.Exploit;
import com.lucifaer.jokerframework.modules.Payload;
import com.lucifaer.jokerframework.utils.ClassUtil;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Lazy;

import java.util.Map;

import static com.lucifaer.jokerframework.utils.ErrorHandler.printErroMsg;

@Configurable
@Import(ShellConfiguration.class)
public class ExploitConfiguration {
    @Lazy
    @Bean
    public Exploit exploit(ShellDataModel shellContext, Payload payload) throws Exception {
        Map<String, Class> exploitMap = ClassUtil.getAllClassByInterface(Exploit.class);
        String exploitName = shellContext.getParams().get("exploitName");
        Exploit exploit = null;

        for (String className : exploitMap.keySet()) {
            String key = className.toLowerCase();
            if (key.equals(exploitName+"exploit")) {
                exploit = (Exploit) exploitMap.get(className).newInstance();
            }
        }

        if (exploit != null && payload != null) {
            exploit.setPayload(payload);
        }
        else if (exploit == null) {
            printErroMsg(this.getClass(), "exploit is null, maybe get DI error!");
        }
        else {
            printErroMsg(this.getClass(), "payload is null, generate payload error!");
        }
        return exploit;
    }

    @Lazy
    @Bean
    public Payload payload(ShellDataModel shellContext) throws Exception {
        Map<String, Class> payloadMap = ClassUtil.getAllClassByInterface(Payload.class);
        String exploitName = shellContext.getParams().get("exploitName");
        String payloadName = shellContext.getParams().get("payloadName");
        Payload payload = null;

        for (String className : payloadMap.keySet()) {
            String key = className.toLowerCase();
            if (key.startsWith(exploitName+payloadName)) {
                payload = (Payload) payloadMap.get(className).newInstance();
            }
        }

        if (payload != null) {
            payload.init(shellContext.getParams());
        }
        else {
            printErroMsg(this.getClass(), "payload is null, generate payload error!");
        }
        return payload;
    }
}
