package com.lucifaer.jokerframework.joker.core.factory;

import com.lucifaer.jokerframework.joker.core.util.ClassLoaderUtil;
import com.lucifaer.jokerframework.sdk.api.Exploit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Lucifaer
 * @version 3.0
 */
@Component
public class ExploitFactory extends BaseFactory<Exploit> {
    private static final Logger log = LoggerFactory.getLogger(ExploitFactory.class);
    private Map<String, Map<String, Object>> exploitPlugins;
    public ExploitFactory() {
        this.setBeansOfType(Exploit.class);
        this.exploitPlugins = initExploitPlugins();
        this.setExistMap(getExistExploitFromPlugins());
    }

    private Map<String, Map<String, Object>> initExploitPlugins() {
        ClassLoaderUtil classLoaderUtil = new ClassLoaderUtil();
        return classLoaderUtil.getPluginsMap();
    }

    public Map<String, Object> getExploitInfo(String exploitName) {
        return exploitPlugins.get(exploitName);
    }

    private Map<String, Exploit> getExistExploitFromPlugins() {
        Map<String, Exploit> existExploitMap = new HashMap<>();
        if (!exploitPlugins.isEmpty()) {
            log.info("=================== 加载插件 ======================");
            for (Map<String, Object> exploitInfo : exploitPlugins.values()) {
                log.info("[+] " + exploitInfo.get("pluginName") + "                  已加载");
                try {
                    URLClassLoader classLoader = (URLClassLoader) exploitInfo.get("classLoader");
                    Class exploitClass = classLoader.loadClass((String) exploitInfo.get("referencePath"));
                    existExploitMap.put((String) exploitInfo.get("pluginName"), (Exploit) exploitClass.newInstance());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            log.info("=================== 加载插件成功 ==================");
        }
        return existExploitMap;
    }
}
