package com.lucifaer.jokerframework.joker.core.factory;

import com.lucifaer.jokerframework.joker.core.shell.ShellThrowableHandler;
import com.lucifaer.jokerframework.joker.core.util.ClassLoaderUtil;
import com.lucifaer.jokerframework.sdk.api.Exploit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Lucifaer
 * @version 3.0
 */
@Component
public class ExploitFactory extends BaseFactory<Exploit> {
    private static final Logger log = LoggerFactory.getLogger(ClassLoaderUtil.class);
    public ExploitFactory() {
        this.setBeansOfType(Exploit.class);
        this.setExistMap(getExistExploitFromPlugins());
    }

    public Map<String, Exploit> getExistExploitFromPlugins() {
        Map<String, Exploit> existExploitMap = new HashMap<>();
        ClassLoaderUtil clu = new ClassLoaderUtil();
        Map<String, Map<String, Object>> exploitPlugins = clu.getPluginsMap();
        log.info(String.valueOf(exploitPlugins));
        for (Map<String, Object> exploitInfo : exploitPlugins.values()) {
            try {
                URLClassLoader classLoader = (URLClassLoader) exploitInfo.get("classLoader");
                log.info(String.valueOf(exploitInfo));
                Class exploitClass = classLoader.loadClass((String) exploitInfo.get("referencePath"));
                existExploitMap.put((String) exploitInfo.get("pluginName"), (Exploit) exploitClass.newInstance());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return existExploitMap;
    }

    public Map<String, Object> getExploitInfo(String exploitName) {
        ClassLoaderUtil clu = new ClassLoaderUtil();
        Map<String, Map<String, Object>> exploitPlugins = clu.getPluginsMap();
        return exploitPlugins.get(exploitName);
    }
}
