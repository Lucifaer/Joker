package com.lucifaer.jokerframework.joker.core.filter;

import com.lucifaer.jokerframework.joker.core.error.core.ParamLost;
import com.lucifaer.jokerframework.joker.core.shell.ShellHelper;
import com.lucifaer.jokerframework.joker.core.shell.ShellThrowableHandler;
import com.lucifaer.jokerframework.sdk.context.ShellContext;
import com.lucifaer.jokerframework.sdk.model.ExploitModel;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Lucifaer
 * @version 1.0.0.RELEASE
 * @since 2020/6/3
 */
@Component
public class ExploitFilter extends BaseFilter<ExploitModel> {
    private final ShellHelper shellHelper;
    private final ShellThrowableHandler shellThrowableHandler;

    public ExploitFilter(ShellHelper shellHelper, ShellThrowableHandler shellThrowableHandler) {
        this.shellHelper = shellHelper;
        this.shellThrowableHandler = shellThrowableHandler;
    }

    @Override
    public void preCheck(ExploitModel exploit, ShellContext shellContext) {
        List<String> lostParams = new ArrayList<>();
        Map<String, String> params = shellContext.getParams();

        if (params.containsKey("targetUrl") && params.get("targetUrl") != null) {
            exploit.setTargetUrl(params.get("targetUrl"));
        }
        else {
            lostParams.add("targetUrl");
        }

        if (params.containsKey("targetPort") && params.get("targetPort") != null) {
            exploit.setTargetPort(params.get("targetPort"));
        }
        else {
            lostParams.add("targetPort");
        }

        for (String p : exploit.getRequiredParams()) {
            if (!params.containsKey(p)) {
                lostParams.add(p);
            }
            else if (params.get(p) == null) {
                lostParams.add(p);
            }
        }

        try {
            if (!lostParams.isEmpty()) {
                for (String p : lostParams) {
                    shellHelper.echoError("Param " + p + "must be confirmed!");
                }
                throw new ParamLost(lostParams);
            }
        } catch (ParamLost paramLost) {
            shellThrowableHandler.handleThrowable(paramLost);
        }
    }
}
